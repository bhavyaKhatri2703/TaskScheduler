// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const cancelTask = `-- name: CancelTask :one
UPDATE tasks
SET status = 'cancelled',
    updated_at = now()
WHERE id = $1
RETURNING id, name, trigger_type, trigger_datetime, trigger_cron, action_method, action_url, action_headers, action_payload, status, created_at, updated_at, next_run
`

func (q *Queries) CancelTask(ctx context.Context, id pgtype.UUID) (Task, error) {
	row := q.db.QueryRow(ctx, cancelTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TriggerType,
		&i.TriggerDatetime,
		&i.TriggerCron,
		&i.ActionMethod,
		&i.ActionUrl,
		&i.ActionHeaders,
		&i.ActionPayload,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.NextRun,
	)
	return i, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (name, trigger_type, trigger_datetime, trigger_cron, action_method, action_url, action_headers, action_payload, status, next_run)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, name, trigger_type, trigger_datetime, trigger_cron, action_method, action_url, action_headers, action_payload, status, created_at, updated_at, next_run
`

type CreateTaskParams struct {
	Name            string
	TriggerType     string
	TriggerDatetime pgtype.Timestamptz
	TriggerCron     pgtype.Text
	ActionMethod    string
	ActionUrl       string
	ActionHeaders   []byte
	ActionPayload   []byte
	Status          string
	NextRun         pgtype.Timestamptz
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.Name,
		arg.TriggerType,
		arg.TriggerDatetime,
		arg.TriggerCron,
		arg.ActionMethod,
		arg.ActionUrl,
		arg.ActionHeaders,
		arg.ActionPayload,
		arg.Status,
		arg.NextRun,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TriggerType,
		&i.TriggerDatetime,
		&i.TriggerCron,
		&i.ActionMethod,
		&i.ActionUrl,
		&i.ActionHeaders,
		&i.ActionPayload,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.NextRun,
	)
	return i, err
}

const createTaskResult = `-- name: CreateTaskResult :one
INSERT INTO task_results (task_id,run_at,status_code,success,response_headers,response_body,error_message,duration_ms,created_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, now())
RETURNING id, task_id, run_at, status_code, success, response_headers, response_body, error_message, duration_ms, created_at
`

type CreateTaskResultParams struct {
	TaskID          pgtype.UUID
	RunAt           pgtype.Timestamptz
	StatusCode      int32
	Success         bool
	ResponseHeaders []byte
	ResponseBody    []byte
	ErrorMessage    pgtype.Text
	DurationMs      int32
}

func (q *Queries) CreateTaskResult(ctx context.Context, arg CreateTaskResultParams) (TaskResult, error) {
	row := q.db.QueryRow(ctx, createTaskResult,
		arg.TaskID,
		arg.RunAt,
		arg.StatusCode,
		arg.Success,
		arg.ResponseHeaders,
		arg.ResponseBody,
		arg.ErrorMessage,
		arg.DurationMs,
	)
	var i TaskResult
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.RunAt,
		&i.StatusCode,
		&i.Success,
		&i.ResponseHeaders,
		&i.ResponseBody,
		&i.ErrorMessage,
		&i.DurationMs,
		&i.CreatedAt,
	)
	return i, err
}

const getTask = `-- name: GetTask :one
SELECT id, name, trigger_type, trigger_datetime, trigger_cron, action_method, action_url, action_headers, action_payload, status, created_at, updated_at, next_run FROM tasks
WHERE id = $1
`

func (q *Queries) GetTask(ctx context.Context, id pgtype.UUID) (Task, error) {
	row := q.db.QueryRow(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TriggerType,
		&i.TriggerDatetime,
		&i.TriggerCron,
		&i.ActionMethod,
		&i.ActionUrl,
		&i.ActionHeaders,
		&i.ActionPayload,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.NextRun,
	)
	return i, err
}

const getTasksToRun = `-- name: GetTasksToRun :many
SELECT id, name, trigger_type, trigger_datetime, trigger_cron, action_method, action_url, action_headers, action_payload, status, created_at, updated_at, next_run
FROM tasks
WHERE status = 'scheduled'
  AND next_run <= $1
ORDER BY next_run ASC
`

func (q *Queries) GetTasksToRun(ctx context.Context, nextRun pgtype.Timestamptz) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasksToRun, nextRun)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.TriggerType,
			&i.TriggerDatetime,
			&i.TriggerCron,
			&i.ActionMethod,
			&i.ActionUrl,
			&i.ActionHeaders,
			&i.ActionPayload,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.NextRun,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTaskResults = `-- name: ListTaskResults :many
SELECT id, task_id, run_at, status_code, success, response_headers, response_body, error_message, duration_ms, created_at FROM task_results
WHERE task_id = $1
`

func (q *Queries) ListTaskResults(ctx context.Context, taskID pgtype.UUID) ([]TaskResult, error) {
	rows, err := q.db.Query(ctx, listTaskResults, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaskResult
	for rows.Next() {
		var i TaskResult
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.RunAt,
			&i.StatusCode,
			&i.Success,
			&i.ResponseHeaders,
			&i.ResponseBody,
			&i.ErrorMessage,
			&i.DurationMs,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasks = `-- name: ListTasks :many
SELECT id, name, trigger_type, trigger_datetime, trigger_cron, action_method, action_url, action_headers, action_payload, status, created_at, updated_at, next_run FROM tasks
WHERE ($1::TEXT IS NULL OR $1 = '' OR status = $1)
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListTasksParams struct {
	Column1 string
	Limit   int32
	Offset  int32
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasks, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.TriggerType,
			&i.TriggerDatetime,
			&i.TriggerCron,
			&i.ActionMethod,
			&i.ActionUrl,
			&i.ActionHeaders,
			&i.ActionPayload,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.NextRun,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET name = COALESCE($2, name),
    trigger_type = COALESCE($3, trigger_type),
    trigger_datetime = COALESCE($4, trigger_datetime),
    trigger_cron = COALESCE($5, trigger_cron),
    action_method = COALESCE($6, action_method),
    action_url = COALESCE($7, action_url),
    action_headers = COALESCE($8, action_headers),
    action_payload = COALESCE($9, action_payload),
    status = COALESCE($10, status),
    next_run = COALESCE($11, next_run),
    updated_at = now()
WHERE id = $1
RETURNING id, name, trigger_type, trigger_datetime, trigger_cron, action_method, action_url, action_headers, action_payload, status, created_at, updated_at, next_run
`

type UpdateTaskParams struct {
	ID              pgtype.UUID
	Name            string
	TriggerType     string
	TriggerDatetime pgtype.Timestamptz
	TriggerCron     pgtype.Text
	ActionMethod    string
	ActionUrl       string
	ActionHeaders   []byte
	ActionPayload   []byte
	Status          string
	NextRun         pgtype.Timestamptz
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTask,
		arg.ID,
		arg.Name,
		arg.TriggerType,
		arg.TriggerDatetime,
		arg.TriggerCron,
		arg.ActionMethod,
		arg.ActionUrl,
		arg.ActionHeaders,
		arg.ActionPayload,
		arg.Status,
		arg.NextRun,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TriggerType,
		&i.TriggerDatetime,
		&i.TriggerCron,
		&i.ActionMethod,
		&i.ActionUrl,
		&i.ActionHeaders,
		&i.ActionPayload,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.NextRun,
	)
	return i, err
}

const updateTaskStatus = `-- name: UpdateTaskStatus :one
UPDATE tasks
SET status = $2,
    updated_at = now()
WHERE id = $1
RETURNING id, name, trigger_type, trigger_datetime, trigger_cron, action_method, action_url, action_headers, action_payload, status, created_at, updated_at, next_run
`

type UpdateTaskStatusParams struct {
	ID     pgtype.UUID
	Status string
}

func (q *Queries) UpdateTaskStatus(ctx context.Context, arg UpdateTaskStatusParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTaskStatus, arg.ID, arg.Status)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TriggerType,
		&i.TriggerDatetime,
		&i.TriggerCron,
		&i.ActionMethod,
		&i.ActionUrl,
		&i.ActionHeaders,
		&i.ActionPayload,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.NextRun,
	)
	return i, err
}
