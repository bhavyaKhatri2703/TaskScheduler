// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const cancelTask = `-- name: CancelTask :one
UPDATE tasks
SET status = 'cancelled',
    updated_at = now()
WHERE id = $1
RETURNING id, name, trigger, action, status, created_at, updated_at, next_run
`

func (q *Queries) CancelTask(ctx context.Context, id pgtype.UUID) (Task, error) {
	row := q.db.QueryRow(ctx, cancelTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Trigger,
		&i.Action,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.NextRun,
	)
	return i, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (name, "trigger", action, status, next_run)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, trigger, action, status, created_at, updated_at, next_run
`

type CreateTaskParams struct {
	Name    string
	Trigger []byte
	Action  []byte
	Status  string
	NextRun pgtype.Timestamptz
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.Name,
		arg.Trigger,
		arg.Action,
		arg.Status,
		arg.NextRun,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Trigger,
		&i.Action,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.NextRun,
	)
	return i, err
}

const getTask = `-- name: GetTask :one
SELECT id, name, trigger, action, status, created_at, updated_at, next_run FROM tasks
WHERE id = $1
`

func (q *Queries) GetTask(ctx context.Context, id pgtype.UUID) (Task, error) {
	row := q.db.QueryRow(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Trigger,
		&i.Action,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.NextRun,
	)
	return i, err
}

const listTaskResults = `-- name: ListTaskResults :many
SELECT id, task_id, run_at, status_code, success, response_headers, response_body, error_message, duration_ms, created_at FROM task_results
WHERE task_id = $1
`

func (q *Queries) ListTaskResults(ctx context.Context, taskID pgtype.UUID) ([]TaskResult, error) {
	rows, err := q.db.Query(ctx, listTaskResults, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaskResult
	for rows.Next() {
		var i TaskResult
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.RunAt,
			&i.StatusCode,
			&i.Success,
			&i.ResponseHeaders,
			&i.ResponseBody,
			&i.ErrorMessage,
			&i.DurationMs,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasks = `-- name: ListTasks :many
SELECT id, name, trigger, action, status, created_at, updated_at, next_run FROM tasks
WHERE ($1::TEXT IS NULL OR status = $1)
LIMIT $2 OFFSET $3
`

type ListTasksParams struct {
	Column1 string
	Limit   int32
	Offset  int32
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasks, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Trigger,
			&i.Action,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.NextRun,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET name = COALESCE($2, name),
    "trigger" = COALESCE($3, "trigger"),
    action = COALESCE($4, action),
    status = COALESCE($5, status),
    next_run = COALESCE($6, next_run),
    updated_at = now()
WHERE id = $1
RETURNING id, name, trigger, action, status, created_at, updated_at, next_run
`

type UpdateTaskParams struct {
	ID      pgtype.UUID
	Name    string
	Trigger []byte
	Action  []byte
	Status  string
	NextRun pgtype.Timestamptz
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTask,
		arg.ID,
		arg.Name,
		arg.Trigger,
		arg.Action,
		arg.Status,
		arg.NextRun,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Trigger,
		&i.Action,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.NextRun,
	)
	return i, err
}
